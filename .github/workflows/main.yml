name: CI/CD

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  frontend:
    name: 🎨 Frontend checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npx eslint .

      - name: Prettier check
        run: npx prettier --check assets/

      - name: Build frontend
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: internal/assets/dist
          if-no-files-found: error

  test:
    needs: [frontend]
    name: 🧪 Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: availability & reliability of windows runners may be tricky
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: internal/assets/dist

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Test
        run: go test -v ./...

      - name: Vet
        run: go vet ./...

  build:
    needs: [test, frontend]
    name: 🏗️ Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            cgo_enabled: 1
          - os: macos-latest # Apple Silicon runner for arm64
            goos: darwin
            goarch: arm64
            cgo_enabled: 1
          - os: windows-latest
            goos: windows
            goarch: amd64
            cgo_enabled: 1

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: internal/assets/dist

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
        run: |
          mkdir -p bin
          output_name="bambino-$GOOS-$GOARCH"
          if [ "$GOOS" = "windows" ]; then
            output_name="$output_name.exe"
          fi
          go build -ldflags="-w -s" -o "bin/$output_name" ./cmd/bambino
        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: bambino-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/bambino-*
          if-no-files-found: error

  release:
    name: 🚀 Release
    if: startsWith( github.ref, 'refs/tags/v')
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.release_info.outputs.release_name }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - uses: extractions/setup-just@v2
        with:
          just-version: 1.32.0

      - name: Generate release notes
        run: just release-notes

      - name: Set release info
        id: release_info
        run: |
          TODAY="($(TZ=Africa/Lusaka date --iso))"
          echo "release_name=${{ github.ref_name }} $TODAY" >> $GITHUB_OUTPUT

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bambino-*
          path: artifacts
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_info.outputs.release_name }}
          body_path: ../LATEST_RELEASE_NOTES.md
          files: artifacts/**/*
